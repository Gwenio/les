
;	ISC License (ISC)
;
;	Copyright 2017 Adam Armstrong
;
;	Permission to use, copy, modify, and/or distribute this software for any
;	purpose with or without fee is hereby granted, provided that the above copyright
;	notice and this permission notice appear in all copies.
;
;	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
;	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
;	FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
;	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
;	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
;	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;	PERFORMANCE OF THIS SOFTWARE.

;	($and? . x)
;	Operative - captures the current environment.
;
;	Summary: Checks if each expression evaluates to true.
;
;	Returns: #true or #false
;
;	Parameters:
;	x	A list of expression.
;
;	Details:
;		Each expression is evaluated in the calling environment
;		until an error occurs, one returns #f, or the end of the
;		list is reached.
;
;		This allows unneeded evaluations to be avoided.
($define $and? ($closure loop (env . x)
	($cond
		((pair? x)
			($define (y . z) x)
			($define y (apply eval y z))
			($if (boolean? y)
				($if y
					(apply loop env . z)
					#f)
				(error)))
		((null? x) x)
		(#t (error)))))

;	(and? . x)
;	Applicative - does not capture the current environment.
;
;	Summary: Checks a list to see that all elements are booleans.
;
;	Returns: #true or #false
;
;	Parameters:
;	x	A list of booleans.
;
;	Details:
;		Compared to $and?, this applicative forces all arguments
;		to be evaluated.
;
;	See:
;		$and?
($define and?
	($let aux
		($closure loop x
			($cond
				((pair? x)
					($define (y . z) x)
					($if (boolean? y)
						($if y
							(apply loop . z)
							#f)
						(error)))
				((null? x) x)
				(#t (error))))
		($seal applicative ($closure _ (_ . x)
			(apply aux . x)))))
