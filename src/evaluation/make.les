
;	ISC License (ISC)
;
;	Copyright 2017 Adam Armstrong
;
;	Permission to use, copy, modify, and/or distribute this software for any
;	purpose with or without fee is hereby granted, provided that the above copyright
;	notice and this permission notice appear in all copies.
;
;	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
;	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
;	FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
;	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
;	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
;	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;	PERFORMANCE OF THIS SOFTWARE.

;	Internal
;
;	Summary: Returned by $vau when the body is #null.
($define inert-operative ($closure _ _ #inert))

;	Internal
;
;	Summary: Returned by $lambda when the body is #null.
($define inert-applicative
	($seal applicative inert-operative))

;	($vau env parameters . body)
;	Operative - captures current environment.
;
;	Summary: Assigns values to symbolic keys in the calling environment.
;
;	Returns: A new operative.
;
;	Parameters:
;	env			The name to assign to the calling environment.
;				Must be #ignore or a symbol.
;	parameters	The parameter tree of the operative.
;	body		The body of the operative.
;
;	Details:
;		.
;
;	See:
;		$define!
($define $vau ($closure _ (env . b)
	($if (pair? b)
		($let (e . b) b
			($if (pair? b)
				($let (p . b) b
					($cond
						((pair? b)
							($closure _ (x . y)
								($define a (apply make_environment env))
								(apply assign! a (list e . p) (list a . x))
								(apply sequence-aux a . b)))
						((null? b) inert-operative)
						(#t (error))))
				(error)))
		(error))))
	

;	($lambda parameters . body)
;	Operative - captures current environment.
;
;	Summary: Assigns values to symbolic keys in the calling environment.
;
;	Returns: (wrap ((wrap $vau) _ parameters . body))
;
;	Parameters:
;	parameters	The parameter tree of the applicative.
;	body		The body of the applicative.
;
;	Details:
;		.
;
;	See:
;		$define!
($define $lambda ($closure _ (env . b)
	($if (pair? b)
		($let (p . b) b
			($cond
				((pair? b)
					($seal applicative (closure _ (_ . x)
						($define a (apply make_environment env))
						(apply assign! a p x)
						(apply sequence-aux a . b)))
				((null? b) inert-applicative)
				(#t (error)))))
		(error))))
