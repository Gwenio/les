
;	ISC License (ISC)
;
;	Copyright 2017 Adam Armstrong
;
;	Permission to use, copy, modify, and/or distribute this software for any
;	purpose with or without fee is hereby granted, provided that the above copyright
;	notice and this permission notice appear in all copies.
;
;	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
;	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
;	FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
;	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
;	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
;	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;	PERFORMANCE OF THIS SOFTWARE.

;	(inert? . x)
;	Applicative - does not capture the current environment.
;
;	Summary: Checks a list to see that all elements are #inert.
;
;	Returns: #true or #false
;
;	Parameters:
;	x	A list to check the elements of.
;
;	Details:
;		If x is #null returns #true, if not a pair or #null returns #false.
;		The cdr of the last pair in the list is ignored.
($type-check inert? _ aux ((inert? x)) x y)

;	(ignore? . x)
;	Applicative - does not capture the current environment.
;
;	Summary: Checks a list to see that all elements are #ignore.
;
;	Returns: #true or #false
;
;	Parameters:
;	x	A list to check the elements of.
;
;	Details:
;		If x is #null returns #true, if not a pair or #null returns #false.
;		The cdr of the last pair in the list is ignored.
($type-check ignore? _ ((ignore? x)) x y)

;	(symbol? . x)
;	Applicative - does not capture the current environment.
;
;	Summary: Checks a list to see that all elements are symbols.
;
;	Returns: #true or #false
;
;	Parameters:
;	x	A list to check the elements of.
;
;	Details:
;		If x is #null returns #true, if not a pair or #null returns #false.
;		The cdr of the last pair in the list is ignored.
($type-check symbol? _ aux ((symbol? x)) x y)

;	(applicative? . x)
;	Applicative - does not capture the current environment.
;
;	Summary: Checks a list to see that all elements are applicatives.
;
;	Returns: #true or #false
;
;	Parameters:
;	x	A list to check the elements of.
;
;	Details:
;		If x is #null returns #true, if not a pair or #null returns #false.
;		The cdr of the last pair in the list is ignored.
($type-check applicative? _ (($seal-type? applicative x)) x y)

;	(operative? . x)
;	Applicative - does not capture the current environment.
;
;	Summary: Checks a list to see that all elements are operatives.
;
;	Returns: #true or #false
;
;	Parameters:
;	x	A list to check the elements of.
;
;	Details:
;		If x is #null returns #true, if not a pair or #null returns #false.
;		The cdr of the last pair in the list is ignored.
($type-check operative? _ aux ((closure? x)) x y)

;	(combiner? . x)
;	Applicative - does not capture the current environment.
;
;	Summary: Checks a list to see that all elements are combiners.
;
;	Returns: #true or #false
;
;	Parameters:
;	x	A list to check the elements of.
;
;	Details:
;		If x is #null returns #true, if not a pair or #null returns #false.
;		The cdr of the last pair in the list is ignored.
;		Both applicatives and operatives are combiners.
($type-check combiner? _ aux ((closure? x) ($seal-type? applicative x)) x y)
